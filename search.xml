<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[todo 列表]]></title>
      <url>http://waitfish.github.io/2017/01/23/todo/</url>
      <content type="html"><![CDATA[<h1 id="待学习的列表"><a href="#待学习的列表" class="headerlink" title="待学习的列表"></a>待学习的列表</h1><ul>
<li>Django-restful 的authorize 和 permission</li>
<li>Scrapy….</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> todo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django-restful 的 viewset]]></title>
      <url>http://waitfish.github.io/2017/01/21/rest-viewset/</url>
      <content type="html"><![CDATA[<h1 id="ViewSet"><a href="#ViewSet" class="headerlink" title="ViewSet"></a>ViewSet</h1><p>是框架的基类,没有提供<code>list</code> <code>create</code>等方法,继承之后可以自定义每个方法.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class UserViewSet(viewsets.ViewSet):</div><div class="line">    ""</div><div class="line">    Example empty viewset demonstrating the standard</div><div class="line">    actions that will be handled by a router class.</div><div class="line"></div><div class="line">    If you're using format suffixes, make sure to also include</div><div class="line">    the `format=None` keyword argument for each action.</div><div class="line">    ""</div><div class="line"></div><div class="line">    def list(self, request):</div><div class="line">        pass</div><div class="line"></div><div class="line">    def create(self, request):</div><div class="line">        pass</div><div class="line"></div><div class="line">    def retrieve(self, request, pk=None):</div><div class="line">        pass</div><div class="line"></div><div class="line">    def update(self, request, pk=None):</div><div class="line">        pass</div><div class="line"></div><div class="line">    def partial_update(self, request, pk=None):</div><div class="line">        pass</div><div class="line"></div><div class="line">    def destroy(self, request, pk=None):</div><div class="line">        pass"</div></pre></td></tr></table></figure>
<h1 id="ModelViewSet"><a href="#ModelViewSet" class="headerlink" title="ModelViewSet"></a>ModelViewSet</h1><p>模板基类,提供了所有框架有的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">    <span class="string">""</span></div><div class="line">    A viewset that provides the standard actions</div><div class="line">    <span class="string">""</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line"></div><div class="line"><span class="meta">    @detail_route(methods=['post'])</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_password</span><span class="params">(self, request, pk=None)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">    @list_route()</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recent_users</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>如果要定制某些方法,可以使用修饰符,比如<code>@list_route()</code>,还可以接收其他的参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_password</span><span class="params">(self, request, pk=None)</span>:</span></div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>使用定制方法后的<code>url</code>如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^users/&#123;pk&#125;/unset_password/$</div></pre></td></tr></table></figure></p>
<h1 id="ReadOnlyModelViewSet"><a href="#ReadOnlyModelViewSet" class="headerlink" title="ReadOnlyModelViewSet"></a>ReadOnlyModelViewSet</h1><p>提供常见的<code>get</code> <code>list</code>方法</p>
<h1 id="定制自己的基类"><a href="#定制自己的基类" class="headerlink" title="定制自己的基类"></a>定制自己的基类</h1><p>混合<code>Mixin</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class CreateListRetrieveViewSet(mixins.CreateModelMixin,</div><div class="line">    mixins.ListModelMixin,</div><div class="line">    mixins.RetrieveModelMixin,</div><div class="line">    viewsets.GenericViewSet):</div><div class="line">    ""</div><div class="line">    A viewset that provides `retrieve`, `create`, and `list` actions.</div><div class="line"></div><div class="line">    To use it, override the class and set the `.queryset` and</div><div class="line">    `.serializer_class` attributes.</div><div class="line">    ""</div><div class="line">    pass</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> restful </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django-restful 框架学习]]></title>
      <url>http://waitfish.github.io/2017/01/20/django-rest/</url>
      <content type="html"><![CDATA[<h1 id="Serialization-序列化"><a href="#Serialization-序列化" class="headerlink" title="Serialization 序列化"></a>Serialization 序列化</h1><p>创建专门的序列化的 class 可以帮助 model 序列化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Snippet</div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>)</div></pre></td></tr></table></figure></p>
<p>也可以自己创建序列化的函数,但是官方提供了modelserializer供我们继承</p>
<h1 id="request-response-对象"><a href="#request-response-对象" class="headerlink" title="request,response 对象"></a>request,response 对象</h1><p>rest 框架重新封装了这2个对象.</p>
<h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p><code>request.post</code>可以得到客户端 post 的数据<br><code>request.data</code>则可以处理 post\put\patch 等方法的数据(推荐使用data)</p>
<h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><p><code>response</code>  对象是 <code>TemplateResponse</code>类型,它可以根据内容来决定返回给客户端的数据格式(比如:html 或者json)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> format_suftrom django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</div><div class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^snippets/$'</span>, views.snippet_list),</div><div class="line">        url(<span class="string">r'^snippets/(?P&lt;pk&gt;[0-9]+)$'</span>, views.snippet_detail),</div><div class="line">        ]</div><div class="line"></div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>
<p>当客户端是浏览器的时候,就返回html代码,默认返回该格式<br>当客户端指定<code>endpoint</code>的时候就返回相应的格式.<br><code>http://127.0.0.1/user.json</code> 就返回 json<br><code>http://127.0.0.1/user.api</code> 就返回 html<br>客户端也可以在 <code>httpheader</code> 里面指定<code>accept</code>内容,比如<code>appication/json</code> <code>text/html</code></p>
<a id="more"></a>
<h1 id="使用-classview"><a href="#使用-classview" class="headerlink" title="使用 classview"></a>使用 classview</h1><p>和<code>django</code>一样,这个框架也有封装好的<code>classview</code>,具体的方法如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</div><div class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(APIView)</span>:</span></div><div class="line">    <span class="string">""</span></div><div class="line">    List all snippets, <span class="keyword">or</span> create a new snippet.</div><div class="line">    <span class="string">""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        snippets = Snippet.objects.all()</div><div class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        serializer = SnippetSerializer(data=request.data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)<span class="string">"</span></div></pre></td></tr></table></figure></p>
<h2 id="还有高级的混合类"><a href="#还有高级的混合类" class="headerlink" title="还有高级的混合类"></a>还有高级的混合类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</div><div class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(mixins.ListModelMixin,</span></span></div><div class="line">    mixins.CreateModelMixin,</div><div class="line">    generics.GenericAPIView):</div><div class="line">    queryset = Snippet.objects.all()</div><div class="line">    serializer_class = SnippetSerializer</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</div></pre></td></tr></table></figure>
<p>抽象了常见的<code>list\create</code>等方法</p>
<h2 id="最高级的classbase类"><a href="#最高级的classbase类" class="headerlink" title="最高级的classbase类"></a>最高级的classbase类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</div><div class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></div><div class="line">    queryset = Snippet.objects.all()</div><div class="line">    serializer_class = SnippetSerializer</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetDetail</span><span class="params">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></div><div class="line">    queryset = Snippet.objects.all()</div><div class="line">    serializer_class = SnippetSerializer</div></pre></td></tr></table></figure>
<p>使用这个高级的<code>view</code>类,两行代码就完成了 <code>get\put\delete</code>方法,全都浓缩了.</p>
<h2 id="使用基于类的-url-配置"><a href="#使用基于类的-url-配置" class="headerlink" title="使用基于类的 url 配置"></a>使用基于类的 url 配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</div><div class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^snippets/$'</span>, views.SnippetList.as_view()),</div><div class="line">    url(<span class="string">r'^snippets/(?P&lt;pk&gt;[0-9]+)/$'</span>, views.SnippetDetail.as_view()),</div><div class="line">        ]</div><div class="line"></div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>
<h1 id="认证和权限控制"><a href="#认证和权限控制" class="headerlink" title="认证和权限控制"></a>认证和权限控制</h1><h2 id="对model进行权限控制的时候-需要在model加上django的用户外键"><a href="#对model进行权限控制的时候-需要在model加上django的用户外键" class="headerlink" title="对model进行权限控制的时候,需要在model加上django的用户外键"></a>对<code>model</code>进行权限控制的时候,需要在<code>model</code>加上<code>django</code>的用户外键</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">owner = models.ForeignKey(<span class="string">'auth.User'</span>, related_name=<span class="string">'snippets'</span>, on_delete=models.CASCADE)</div></pre></td></tr></table></figure>
<p>外键也需要提供默认值,键值是用户<code>id</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">owner = models.ForeignKey(<span class="string">'auth.User'</span>, related_name=<span class="string">'snippets'</span>, on_delete=models.CASCADE,defaut=key)</div></pre></td></tr></table></figure></p>
<p>访问用户的时候可以看到属于用户的对象信息需要<br>添加用户的序列号文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="keyword">True</span>, queryset=Snippet.objects.all())</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'snippets'</span>)</div></pre></td></tr></table></figure>
<h2 id="关联用户和模块-perform-create"><a href="#关联用户和模块-perform-create" class="headerlink" title="关联用户和模块 perform_create"></a>关联用户和模块 perform_create</h2><p>在对应的<code>model</code>的<code>view</code>类中,添加<code>perform_create</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></div><div class="line">    serializer.save(owner=self.request.user)</div></pre></td></tr></table></figure></p>
<h2 id="在model的序列化类中添加-用户的信息"><a href="#在model的序列化类中添加-用户的信息" class="headerlink" title="在model的序列化类中添加 用户的信息"></a>在model的序列化类中添加 用户的信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">owner = serializers.ReadOnlyField(source=<span class="string">'owner.username'</span>)</div></pre></td></tr></table></figure>
<p><code>source</code>可以指定需要输出的属性</p>
<h2 id="基本的权限控制"><a href="#基本的权限控制" class="headerlink" title="基本的权限控制"></a>基本的权限控制</h2><p>从框架中导入默认的权限控制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</div></pre></td></tr></table></figure></p>
<p>在对应的view中添加该属性即可实现基本的权限控制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">permission_classes = (permissions.IsAuthenticatedOrReadOnly,)</div></pre></td></tr></table></figure></p>
<h2 id="定制的权限控制"><a href="#定制的权限控制" class="headerlink" title="定制的权限控制"></a>定制的权限控制</h2><p>可以自建一个权限控制的文件,用来控制<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">from rest_framework import permissions</div><div class="line"></div><div class="line"></div><div class="line">class IsOwnerOrReadOnly(permissions.BasePermission):</div><div class="line">    ""</div><div class="line">    Custom permission to only allow owners of an object to edit it.</div><div class="line">    ""</div><div class="line"></div><div class="line">    def has_object_permission(self, request, view, obj):</div><div class="line">        ""</div><div class="line">        Read permissions are allowed to any request,</div><div class="line">        so we'll always allow GET, HEAD or OPTIONS requests.</div><div class="line">        ""</div><div class="line">        if request.method in permissions.SAFE_METHODS:</div><div class="line">            return True</div><div class="line"></div><div class="line">        return obj.owner == request.user`</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">permission_classes = (permissions.IsAuthenticatedOrReadOnly,</div><div class="line">                      IsOwnerOrReadOnly,)</div></pre></td></tr></table></figure>
<h1 id="给api加上超级链接"><a href="#给api加上超级链接" class="headerlink" title="给api加上超级链接"></a>给api加上超级链接</h1><h2 id="修改模块的序列化类"><a href="#修改模块的序列化类" class="headerlink" title="修改模块的序列化类"></a>修改模块的序列化类</h2><p>在序列化的类上继承 <code>HyperlinkedModelSerializer</code>,并使用<code>HyperlinkedRelatedField</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class="line">    snippets = serializers.HyperlinkedRelatedField(many=<span class="keyword">True</span>, view_name=<span class="string">'snippet-detail'</span>, read_only=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line">        fields = (<span class="string">'url'</span>, <span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'snippets'</span>)</div></pre></td></tr></table></figure>
<p><strong>需要在 url 配置中添加 name 属性</strong></p>
<h2 id="列表页面的分页配置"><a href="#列表页面的分页配置" class="headerlink" title="列表页面的分页配置"></a>列表页面的分页配置</h2><p>在项目的<code>setting.py</code>文件中添加下面的属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">        <span class="string">'PAGE_SIZE'</span>: <span class="number">10</span></div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h1 id="viewset-和-router"><a href="#viewset-和-router" class="headerlink" title="viewset 和 router"></a>viewset 和 router</h1><h2 id="终极抽象-view-类-viewset"><a href="#终极抽象-view-类-viewset" class="headerlink" title="终极抽象 view 类,viewset"></a>终极抽象 view 类,viewset</h2><p>和单独的 <code>view</code> 不同的是,<code>viewset</code>抽象了一般的<code>list</code>和<code>detail</code>方法(list\create\retrieve\update\destroy)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> detail_route</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">    <span class="string">""</span></div><div class="line">    This viewset automatically provides `list`, `create`, `retrieve`,</div><div class="line">    `update` <span class="keyword">and</span> `destroy` actions.</div><div class="line"></div><div class="line">    Additionally we also provide an extra `highlight` action.</div><div class="line">    <span class="string">""</span></div><div class="line">    queryset = Snippet.objects.all()</div><div class="line">    serializer_class = SnippetSerializer</div><div class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly,</div><div class="line">    IsOwnerOrReadOnly,)</div><div class="line"></div><div class="line"><span class="meta">    @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">highlight</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        snippet = self.get_object()</div><div class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></div><div class="line">        serializer.save(owner=self.request.user)<span class="string">"</span></div></pre></td></tr></table></figure>
<h2 id="抽象的-router"><a href="#抽象的-router" class="headerlink" title="抽象的 router"></a>抽象的 router</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</div><div class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</div><div class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</div><div class="line"></div><div class="line"><span class="comment"># Create a router and register our viewsets with it.</span></div><div class="line">router = DefaultRouter()</div><div class="line">router.register(<span class="string">r'snippets'</span>, views.SnippetViewSet)</div><div class="line">router.register(<span class="string">r'users'</span>, views.UserViewSet)</div><div class="line"></div><div class="line"><span class="comment"># The API URLs are now determined automatically by the router.</span></div><div class="line"><span class="comment"># Additionally, we include the login URLs for the browsable API.</span></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^'</span>, include(router.urls)),</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>))</div><div class="line">        ]</div></pre></td></tr></table></figure>
<h1 id="添加-schema"><a href="#添加-schema" class="headerlink" title="添加 schema"></a>添加 schema</h1><p>安装<code>coreapi</code><br><code>pip install coreapi</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.schemas <span class="keyword">import</span> get_schema_view</div><div class="line"></div><div class="line">schema_view = get_schema_view(title=<span class="string">'Pastebin API'</span>)</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">'^schema/$'</span>, schema_view),</div><div class="line">        ...</div><div class="line">        ]</div></pre></td></tr></table></figure></p>
<h1 id="官方示例项目地址"><a href="#官方示例项目地址" class="headerlink" title="官方示例项目地址"></a>官方示例项目地址</h1><p>github:<a href="https://github.com/tomchristie/rest-framework-tutorial" target="_blank" rel="external">https://github.com/tomchristie/rest-framework-tutorial</a></p>
<p>demo  :<a href="http://restframework.herokuapp.com/snippets/" target="_blank" rel="external">http://restframework.herokuapp.com/snippets/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> restful </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setting,开发的基本设置]]></title>
      <url>http://waitfish.github.io/2017/01/17/setting-of-django/</url>
      <content type="html"><![CDATA[<h2 id="setting-开发的基本设置"><a href="#setting-开发的基本设置" class="headerlink" title="setting,开发的基本设置"></a>setting,开发的基本设置</h2><p><code>ALLOWED_HOSTS = [&quot;*&quot;]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    &apos;default&apos;: &#123;</div><div class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class="line">        &apos;NAME&apos;:&apos;moocdai&apos;,</div><div class="line">        &apos;USER&apos;:&apos;django&apos;,</div><div class="line">        &apos;PASSWORD&apos;:&apos;xxxxx&apos;,</div><div class="line">        &apos;HOST&apos;:&apos;10.10.10.3&apos;,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>TIME_ZONE = &#39;Asia/Shanghai&#39;</code></p>
<p>添加app的另外一种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    &apos;polls.apps.PollsConfig&apos;,</div><div class="line">    &apos;django.contrib.admin&apos;,</div><div class="line">    &apos;django.contrib.auth&apos;,</div><div class="line">    &apos;django.contrib.contenttypes&apos;,</div><div class="line">    &apos;django.contrib.sessions&apos;,</div><div class="line">    &apos;django.contrib.messages&apos;,</div><div class="line">    &apos;django.contrib.staticfiles&apos;,</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h2 id="render-取代原来的template方法"><a href="#render-取代原来的template方法" class="headerlink" title="render,取代原来的template方法"></a>render,取代原来的template方法</h2><p>shortcut 是django中一些有用的便捷方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    latest_question_list=Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</div><div class="line">    context=&#123;</div><div class="line"></div><div class="line">        <span class="string">'latest_question_list'</span>:latest_question_list</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> render(request,<span class="string">'polls/index.html'</span>,context)</div></pre></td></tr></table></figure></p>
<h2 id="get-object-or-404-连接视图和模型-官方推荐"><a href="#get-object-or-404-连接视图和模型-官方推荐" class="headerlink" title="get_object_or_404,连接视图和模型,官方推荐?"></a>get_object_or_404,连接视图和模型,官方推荐?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request,question_id)</span>:</span></div><div class="line">    question = get_object_or_404(Question,pk=question_id)</div><div class="line">    <span class="keyword">return</span> render(request,<span class="string">"polls/detail.html"</span>,&#123;<span class="string">'question'</span>:question&#125;)</div></pre></td></tr></table></figure>
<h2 id="get-list-or-404-上面的兄弟方法-将模型的get-方法变成filter-方法"><a href="#get-list-or-404-上面的兄弟方法-将模型的get-方法变成filter-方法" class="headerlink" title="get_list_or_404 上面的兄弟方法,将模型的get()方法变成filter()方法"></a>get_list_or_404 上面的兄弟方法,将模型的get()方法变成filter()方法</h2><h2 id="神奇的外键取值"><a href="#神奇的外键取值" class="headerlink" title="神奇的外键取值"></a>神奇的外键取值</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  &#123;% for choice in question.choice_set.all %&#125;</div><div class="line">  #这里question是choice的外键,通过question可以取得关联的choice的集合</div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  &#123;% endfor %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django migrate 出错的处理]]></title>
      <url>http://waitfish.github.io/2017/01/13/django-002/</url>
      <content type="html"><![CDATA[<h1 id="django-migrate-出错的处理"><a href="#django-migrate-出错的处理" class="headerlink" title="django migrate 出错的处理"></a>django migrate 出错的处理</h1><p>如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个<strong>init</strong>.py 文件<br>然后重新 makemigrationgs  migrate</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django 学习(1)]]></title>
      <url>http://waitfish.github.io/2017/01/13/django-001/</url>
      <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><ul>
<li><p>setting.py 文件中设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    &apos;default&apos;: &#123;</div><div class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class="line">        &apos;NAME&apos;:&apos;moocdai&apos;,</div><div class="line">        &apos;USER&apos;:&apos;django&apos;,</div><div class="line">        &apos;PASSWORD&apos;:&apos;xxxxx&apos;,</div><div class="line">        &apos;HOST&apos;:&apos;10.10.10.3&apos;,</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在 ubuntu 中安装mysql支持</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libmysqlclient-dev</div><div class="line">pip install MySQL-python</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="让系统使用我们重载的-userprofile-类"><a href="#让系统使用我们重载的-userprofile-类" class="headerlink" title="让系统使用我们重载的 userprofile 类"></a>让系统使用我们重载的 userprofile 类</h2><p>setting.py 中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from users.models import UserProfile</div><div class="line">AUTH_USER_MODEL=&quot;users.UserProfile&quot;</div></pre></td></tr></table></figure></p>
<h2 id="在modeles中使用imagefield的话-就要安装pillow"><a href="#在modeles中使用imagefield的话-就要安装pillow" class="headerlink" title="在modeles中使用imagefield的话,就要安装pillow"></a>在modeles中使用imagefield的话,就要安装pillow</h2><p><code>pip install pillow</code></p>
<h2 id="如果要用xadmin-现在要用django1-9需要再安装-django-reversion"><a href="#如果要用xadmin-现在要用django1-9需要再安装-django-reversion" class="headerlink" title="如果要用xadmin,现在要用django1.9需要再安装 django-reversion"></a>如果要用xadmin,现在要用django1.9需要再安装 django-reversion</h2><h2 id="django-migrate-出错的处理"><a href="#django-migrate-出错的处理" class="headerlink" title="django migrate 出错的处理"></a>django migrate 出错的处理</h2><p>如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个<strong>init</strong>.py 文件<br>然后重新 makemigrationgs  migrate</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
